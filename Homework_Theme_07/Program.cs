using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Enumeration;
using System.Runtime.CompilerServices;
using System.Runtime.ExceptionServices;

namespace Homework_Theme_07
{
    class Program
    {
        /// <summary>
        /// Method that returns the next ID for notes.
        /// </summary>
        /// <returns>Note.</returns>
        static Note NewNote(Diary diary)
        {
            Console.WriteLine("\nPlease enter a summary for the note.");
            string summary = Console.ReadLine();
            Console.WriteLine("\nPlease enter text for the note.");
            string text = Console.ReadLine();
            return new Note(diary.LastNote, summary, text);
        }

        /// <summary>
        /// Add note menu.
        /// </summary>
        /// <param name="diary">Struct Diary.</param>
        static void AddNote(Diary diary)
        {
            Console.WriteLine("\nAdd notes:" +
                              "\n1 - Add a note manually." +
                              "\n2 - Generate 10 notes automatically." +
                              "\n3 - Return to the Main menu.");
            Console.WriteLine("\nEnter a number from 1 to 3");
            string key = Console.ReadLine();
            var page = new Note();
            switch (key)
            {
                case "1":
                {
                    //Adding a new note from user input data.
                    diary.Add(NewNote(diary));
                    MainMenu(diary);
                    break;
                }
                case "2":
                {
                    for (int i = 1; i <= 10; i++)
                    {
                        page = new Note(diary.LastNote, $"An autogenerated note #{i}.");
                        diary.Add(page);
                    }
                    MainMenu(diary);
                    break;
                }
                default:
                {
                    MainMenu(diary);
                    break;
                }
            }
        }

        /// <summary>
        /// Edit note menu.
        /// </summary>
        /// <param name="diary">Struct Diary.</param>
        static void EditNote(Diary diary)
        {
            Console.WriteLine("\nNot implemented");
            string key = Console.ReadLine();
            switch (key)
            {
                default:
                {
                    MainMenu(diary);
                    break;
                }
            }
        }

        /// <summary>
        /// Remove note menu.
        /// </summary>
        /// <param name="diary">Struct Diary.</param>
        static void RemoveNote(Diary diary)
        {
            Console.WriteLine("\nRemove notes:" +
                              "\n1 - By #." +
                              "\n2 - Remove modified notes." +
                              "\n3 - By Date and Time." +
                              "\n4 - By author." +
                              "\n5 - By text." +
                              "\n6 - By summary." +
                              "\n7 - Return to the Main menu.");
            Console.WriteLine("\nEnter a number from 1 to 3");
            string key = Console.ReadLine();
            //String with user input to tell what he's gonna remove.
            string toRemove = String.Empty;
            switch (key)
            {
                case "1":
                {
                    Console.WriteLine("\nPlease enter # of the note to remove it.");
                    toRemove = Console.ReadLine();
                    if (!String.IsNullOrEmpty(toRemove))
                    {
                        diary.RemoveAll(int.Parse(toRemove));
                    }
                    else
                    {
                        Console.WriteLine("\nNothing to remove.");
                    }
                    MainMenu(diary);
                    break;
                }
                case "2":
                {
                    Console.WriteLine("\nWould you like to remove edited notes? y/n.");
                    toRemove = Console.ReadLine();
                    if (toRemove == "y")
                    {
                        diary.RemoveAll(true);
                    }
                    MainMenu(diary);
                    break;
                }
                case "3":
                    Console.WriteLine("\nPlease enter Date and Time of notes to remove them.");
                    toRemove = Console.ReadLine();
                    if (!String.IsNullOrEmpty(toRemove))
                    {
                        diary.RemoveAll(toRemove);
                    }
                    MainMenu(diary);
                    break;
                case "4":
                    Console.WriteLine("\nPlease enter author of the notes to remove them all.");
                    toRemove = Console.ReadLine();
                    if (!String.IsNullOrEmpty(toRemove))
                    {
                        diary.RemoveAllByAuthor(toRemove);
                    }
                    MainMenu(diary);
                    break;
                case "5":
                    Console.WriteLine("\nPlease enter text of the notes to remove them all.");
                    toRemove = Console.ReadLine();
                    if (!String.IsNullOrEmpty(toRemove))
                    {
                        diary.RemoveAllByText(toRemove);
                    }
                    MainMenu(diary);
                    break;
                case "6":
                    Console.WriteLine("\nPlease enter summary of the notes to remove them all.");
                    toRemove = Console.ReadLine();
                    if (!String.IsNullOrEmpty(toRemove))
                    {
                        diary.RemoveAllBySummary(toRemove);
                    }
                    MainMenu(diary);
                    break;
                default:
                {
                    MainMenu(diary);
                    break;
                }
            }
        }

        static void MainMenu(Diary diary)
        {
            Console.Clear();
            Console.WriteLine("\nNotes of the diary:");
            diary.PrintDiary();
            Console.WriteLine("\nMain menu:" +
                              "\n1 - Add notes." +
                              "\n2 - Edit a note." +
                              "\n3 - Remove notes." +
                              "\n4 - Sort notes." +
                              "\n5 - Save changes to the file." +
                              "\n6 - Exit the program.");
            Console.WriteLine("Enter a number from 1 to 6");
            string key = Console.ReadLine();
            switch (key)
            {
                case "1":
                {
                    AddNote(diary);
                    break;
                }
                case "2":
                    EditNote(diary);
                    break;
                case "3":
                    RemoveNote(diary);
                    break;
                case "4":
                    SortNotes(diary);
                    break;
                case "5":
                    SaveDiary(diary);
                    break;
                default:
                {
                    break;
                }
            }
        }

        private static void SaveDiary(Diary diary)
        {
            diary.Save();
        }

        private static void SortNotes(Diary diary)
        {
            throw new NotImplementedException();
        }

        static void Main(string[] args)
        {
            Console.WriteLine("This is a batch of solutions for \"Homework_Theme_07 7.8 Homework\"");

            //TODO:загрузка записей из файла по диапазону дат,
            //TODO:упорядочивание записей по выбранному полю.
            //TODO:Записи сортируются по выбранному полю.
            //TODO remove the last note in the file.

            const string fileName = "diary.txt";

            //Create a file to store a diary if it doesn't exist
            if (!File.Exists(fileName))
            {
                try
                {
                    // Create the file, or overwrite if the file exists.
                    using (FileStream fs = File.Create(fileName))
                    {
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.ToString());
                }
            }

            //Creating a diary
            var diary = new Diary(fileName);

            //Main loop of the program 
            do
            {
                //main menu call
                MainMenu(diary);

                Console.WriteLine("\nExit y/n?");
                var choice = Console.ReadLine();
                if (choice == "y" || choice == "Y")
                {
                    break;
                }

            } while (true);
            

            //var page2 = new Note(2, "bla?") { Edited = true };
            //var page3 = new Note(3, "mwahaha!");

            //var diary = new Diary("first.txt");
            //diary.Add(page1);
            //diary.Add(page2);
            //diary.Add(page3);
            ////diary.Remove(page2);


            //diary.PrintDiary();
            //diary.Save("first.txt");
            //TODO: make remove method work for loaded diary
            //diary.Remove(page2);
            //diary.PrintDiary();


            //WIll have to Parse DateTime
            //diary.RemoveAll(DateTime.Parse("09/05/2021 01:28:31"));

            //will have to escape "\" symbol in entered strings
            //diary.RemoveAllByAuthor("SELFADY-PC\\Selfady");

            //Console.WriteLine("\nSome elements were removed.");
            //diary.PrintDiary();

            Console.ReadKey();
        }
    }
}
